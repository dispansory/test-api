const Post = require('../models/post');

exports.createAPost = (req, res, next) => {
  const url = req.protocol + '://' + req.get("host");
  const post = new Post({
    title: req.body.title,
    content: req.body.content,
    imagePath: url + "/images/" + req.file.filename,
    creator: req.userData.userId
  });
  post.save().then(createdPost => {
    res.status(201).json({
      post: {
        //...createdPost is short form for getting all objects from the response and overwriing a particular field, "id" in our case
        ...createdPost,
        id: createdPost._id,
      },
      message: "post added sucessfully"
    });
  }).catch(error => {
    res.status(500).json({
      message: "Creating a post failed!"
    })
  })
}

exports.updateAPost = (req, res, next) => {
  let imagePath = req.body.imagePath;
  if (req.file) {
    const url = req.protocol + "://" + req.get("host");
    imagePath = url + "/images/" + req.file.filename;
  }
  const post = new Post({
    _id: req.body.id,
    title: req.body.title,
    content: req.body.content,
    imagePath: imagePath,
    creator: req.userData.userId
  });
  Post.updateOne({_id: req.params.id, creator: req.userData.userId}, post).then(result => {
    //"matchedCount: number" is a field generated by result to indicate the number of matches resulted from query the user made.
    //This logic is usefull is you want to uniquely identified logged in users and restrict their behaviours
    // console.log(result);
    if (result.matchedCount > 0) {
      res.status(200).json({message: 'Post Updated Successfully!'});
    } else {
      res.status(401).json({message: 'Not Authorized!'});
    }
    // Console.log(result);
  }).catch(error => {
    res.status(500).json({
      message: "Couldn't update post!"
    });
  })
}

exports.fetchAllPosts = (req, res, next) => {
  //Query added just for pagination on the frontend, can be remove if pagination is not needed
  const pageSize = +req.query.pageSize;
  const currentPage = +req.query.page;
  const postQuery = Post.find();
  let fetchedPosts;
  if (pageSize && currentPage) {
    postQuery.skip(pageSize * (currentPage - 1)).limit(pageSize);
  }
  postQuery.find().then(documents => {
    fetchedPosts = documents;
    return Post.count();
  }).then(count => {
    res.status(200).json({
      message: "Posts fetched sucessfully!",
      posts: fetchedPosts,
      maxPosts: count
    });
  }).catch(error => {
    res.status(500).json({
      message: "Fetching posts failed!"
    });
  });
}

exports.fetchAPost = (req, res, next) => {
  Post.findById(req.params.id).then(post => {
    if (post) {
      res.status(200).json(post);
    } else {
      res.status(404).json({message: 'Post not found!'});
    }
  }).catch(error => {
    res.status(500).json({
      message: "Fetching post failed!"
    });
  });
}

exports.deleteAPost = (req, res, next) => {
  Post.deleteOne({_id: req.params.id, creator: req.userData.userId}).then(result => {
    //"deletedCount: number" is a field generated by result to indicate the number deleted documents/collections (remember we are mongodb store data in documents/collections) by the user.
    //This logic is usefull is you want to uniquely identified logged in users and restrict their behaviours
    // console.log(result);
    if (result.deletedCount > 0) {
      res.status(200).json({message: 'Post Deleted!'});
    } else {
      res.status(401).json({message: 'Not Authorized!'});
    }
    // console.log(result);
  }).catch(error => {
    res.status(500).json({
      message: "Delete post failed!"
    });
  });
}
